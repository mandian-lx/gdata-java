--- a/java/build-src/core.xml
+++ b/java/build-src/core.xml
@@ -111,15 +111,16 @@
           depends="template.build.service.init"
           unless="template.build.service.meta.isCurrent">
     <mkdir dir="${template.service.meta.kinds}"/>
-    <apt debug="false"
+    <javac debug="false"
          srcdir="${build.src}"
          destdir="${template.service.meta.kinds}"
-         compile="false"
-         factory="com.google.gdata.data.apt.DataAnnotationProcessorFactory"
          includes="${template.service.includes}"
          excludes="${template.service.excludes}">
         <classpath refid="${template.service.classpath}"/>
-    </apt>
+	<!--compilerarg line="-processor com.google.gdata.data.apt.DataAnnotationProcessorFactory"/-->
+       	<compilerarg line="-proc:only"/>
+    </javac>
+
     <jar destfile="${template.service.meta.jar}">
       <fileset dir="${template.service.meta}">
         <include name="META-INF/**"/>
@@ -157,6 +158,7 @@
             <path refid="${template.service.classpath}"/>
             <pathelement location="${template.service.meta.jar}"/>
           </classpath>
+          <compilerarg line="-proc:none"/>
     </javac>
     <jar destfile="${template.service.jar}"
          basedir="${template.service.classes}"
@@ -282,7 +284,13 @@
       <include name="com/google/gdata/wireformats/output/*.java"/>
       <exclude name="com/google/gdata/data/MediaContent.java"/>
       <classpath refid="build.google-deps.classpath"/>
+      <compilerarg line="-proc:none"/>
     </javac>
+
+    <!-- add processor service -->
+    <!--mkdir dir="${build.classes.core}/META-INF/services"/-->
+    <!--echo output="${build.classes.core}/META-INF/services/javax.annotation.processing.Processor"
+          message="com.google.gdata.data.apt.DataAnnotationProcessorFactory"/-->
     <jar destfile="${gdata-core.jar}"
          basedir="${build.classes.core}"
          manifest="${gdata-core.manifest}">
@@ -304,17 +312,18 @@
           depends="build.core.base,chk.build.core.client.meta"
           unless="build.core.client.meta.isCurrent">
     <mkdir dir="${build.genfiles.meta.client.kinds}"/>
-    <apt debug="false"
+    <javac debug="false"
          srcdir="${build.src}"
-         destdir="${build.genfiles.meta.client.kinds}"
-         compile="false"
-         factory="com.google.gdata.data.apt.DataAnnotationProcessorFactory">
+         destdir="${build.genfiles.meta.client.kinds}">
         <classpath>
           <pathelement location="${gdata-core.jar}"/>
           <path refid="build.google-deps.classpath"/>
         </classpath>
         <include name="com/google/gdata/data/extensions/*.java"/>
-    </apt>
+        <compilerarg line="-processor com.google.gdata.data.apt.DataAnnotationProcessorFactory"/>
+        <compilerarg line="-proc:only"/>
+    </javac>
+
     <jar destfile="${gdata-client-meta.jar}">
       <fileset dir="${build.genfiles.meta.client}">
         <include name="META-INF/**"/>
@@ -337,6 +346,7 @@
           <pathelement location="${gdata-core.jar}"/>
           <pathelement location="${gdata-client-meta.jar}"/>
         </classpath>
+       	<compilerarg line="-proc:none"/>
     </javac>
     <jar destfile="${gdata-client.jar}"
          basedir="${build.classes.client}"
@@ -372,6 +382,7 @@
       <include name="**/model/mediarss/*.java"/>
       <include name="**/wireformats/input/media/*.java"/>
       <include name="**/wireformats/output/media/*.java"/>
+      <compilerarg line="-proc:none"/>
     </javac>
     <jar destfile="${gdata-media.jar}"
          basedir="${build.classes.media}"
--- a/java/src/com/google/gdata/data/apt/DataAnnotationProcessorFactory.java
+++ b/java/src/com/google/gdata/data/apt/DataAnnotationProcessorFactory.java
@@ -18,18 +18,23 @@
 
 import com.google.gdata.data.Kind;
 
-import com.sun.mirror.apt.AnnotationProcessor;
-import com.sun.mirror.apt.AnnotationProcessorEnvironment;
-import com.sun.mirror.apt.AnnotationProcessorFactory;
-import com.sun.mirror.apt.Filer;
-import com.sun.mirror.apt.Messager;
-import com.sun.mirror.declaration.AnnotationTypeDeclaration;
-import com.sun.mirror.declaration.ClassDeclaration;
-import com.sun.mirror.declaration.Declaration;
-import com.sun.mirror.declaration.TypeDeclaration;
-import com.sun.mirror.type.ClassType;
-import com.sun.mirror.type.InterfaceType;
-import com.sun.mirror.util.Types;
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Filer;
+import javax.annotation.processing.Messager;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.RoundEnvironment;
+import javax.annotation.processing.SupportedAnnotationTypes;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind; 
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement; 
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+
+import javax.tools.*;
+import javax.tools.StandardLocation;
 
 import java.io.File;
 import java.io.IOException;
@@ -43,146 +48,80 @@
 import java.util.Map;
 import java.util.Set;
 
-/**
- * The DataAnnotationProcessFactory class supports auto-generation of
- * metadata about GData Kind data model classes.   Generation is handled
- * by implementing the {@link AnnotationProcessor} interfaces defined for
- * the Sun Annotation Processing Tool (APT).
- * <p>
- * The processing can be extended later for any other data-model related
- * annotation usage.
- *
- * 
- */
-public class DataAnnotationProcessorFactory
-    implements AnnotationProcessorFactory {
-
-  /**
-   * The list of annotation types handled by this factory.
-   */
-  private static List<String> supportedTypes =
-      Collections.unmodifiableList(
-          Arrays.asList("com.google.gdata.data.*"));
-
-  /**
-   * The DataAnnotationProcessor class provides annotation processing for the
-   * {@link Kind.Term} annotation.  It generates schema-to-handler
-   * mapping files in META-INF/services which can be used to discover
-   * the {@link Kind.Adaptor} class for a given Kind at runtime.
-   */
-  private static class DataAnnotationProcessor implements AnnotationProcessor {
-
-    private AnnotationProcessorEnvironment env;
-
-    private DataAnnotationProcessor(AnnotationProcessorEnvironment env) {
-
-      this.env = env;
-    }
-
-    /**
-     * Handles the processing and metadata generation associated with the
-     * {@link Kind.Term} annotation.
-     */
-    private void handleKindTerms() {
-
-      Messager msg = env.getMessager();
-      Filer filer = env.getFiler();
-
-      AnnotationTypeDeclaration kindDecl = (AnnotationTypeDeclaration)
-        env.getTypeDeclaration(Kind.Term.class.getName());
-      if (kindDecl == null) {
-        msg.printError("Unable to find the Kind.Term annotation type");
-        return;
-      }
-
-      Types typeUtils = env.getTypeUtils();
-      TypeDeclaration intfDecl =
-        env.getTypeDeclaration(Kind.Adaptor.class.getName());
-      InterfaceType declaratorType =
-        (InterfaceType)typeUtils.getDeclaredType(intfDecl);
-
-      // Used to build a mapping from kind term values to adaptor class names.
-      Map <String, List<String>> adaptorMap =
-        new HashMap<String, List<String>>();
-
-      /*
-       * Phase 1: build an in-memory mapping from kind term values to
-       * the list of implementing adaptor class names.
-       */
-      for (Declaration decl : env.getDeclarationsAnnotatedWith(kindDecl)) {
-
-        // Annotation is only valid on clasess
-        if (! (decl instanceof ClassDeclaration)) {
-          msg.printError(decl.getPosition(),
-              "@Kind.Term may only be used to annotate a class");
-          continue;
-        }
-
-        // The target class must implement Kind.Adaptor
-        ClassDeclaration classDecl = (ClassDeclaration)decl;
-        ClassType classType = (ClassType)typeUtils.getDeclaredType(classDecl);
-        if (!typeUtils.isAssignable(classType, declaratorType)) {
-          msg.printError(classDecl.getPosition(),
-              "Class annotated by @Kind.Term must implement Kind.Adaptor");
+@SupportedAnnotationTypes("com.google.gdata.data.*")
+public class DataAnnotationProcessorFactory extends AbstractProcessor
+{
+
+  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
+  {
+    Messager messager = processingEnv.getMessager();
+    Filer filer = processingEnv.getFiler();
+    
+    // Used to build a mapping from kind term values to adaptor class names.
+    Map <String, List<String>> adaptorMap = new HashMap<String, List<String>>();
+
+    /*
+    * Phase 1: build an in-memory mapping from kind term values to
+    * the list of implementing adaptor class names.
+    */
+    for(Element e : roundEnv.getElementsAnnotatedWith(Kind.Term.class) ) {
+       if(!e.getKind().equals(ElementKind.CLASS)) {
+          messager.printMessage(Diagnostic.Kind.ERROR,
+                 "@Kind.Term may only be used to annotate a class");
           continue;
-        }
-
-        Kind.Term kindTerm = classDecl.getAnnotation(Kind.Term.class);
-
-        List<String> kindAdaptors = adaptorMap.get(kindTerm.value());
-        if (kindAdaptors == null) {
-          kindAdaptors = new ArrayList<String>();
-          adaptorMap.put(kindTerm.value(), kindAdaptors);
-        }
-        kindAdaptors.add(classDecl.toString());
-      }
-
-      /*
-       * Phase 2: write out a GData kind service mapping file for each
-       * term discovered in phase 1.
-       */
-      for (String term : adaptorMap.keySet()) {
-
-        String kindService = Kind.getKindServiceName(term);
-        File servicePath = new File(kindService);
-
-        PrintWriter pw = null;
-        try {
-          pw = filer.createTextFile(Filer.Location.CLASS_TREE, "",
-              servicePath, null);
-          pw.println("# GData Kind Adaptors for " + term);
-          for (String adaptorClass : adaptorMap.get(term)) {
-            pw.println(adaptorClass);
-          }
-        } catch (IOException ioe) {
-          msg.printError("Unable to write kind metadata:" + servicePath);
-          ioe.printStackTrace();
-        } finally {
-          if (pw != null) {
-            pw.close();
+       }
+       else {
+          Kind.Term kindTerm = e.getAnnotation(Kind.Term.class);
+
+          List<String> kindAdaptors = adaptorMap.get(kindTerm.value());
+          if (kindAdaptors == null)
+          {
+            kindAdaptors = new ArrayList<String>();
+            adaptorMap.put(kindTerm.value(), kindAdaptors);
           }
-        }
-        msg.printNotice("Wrote kind metadata for " + term + " to " 
-            + servicePath);
-      }
-    }
-
-    public void process() {
-      handleKindTerms();
+          kindAdaptors.add(e.toString());
+       }
     }
-  }
-
-  public Collection<String> supportedOptions() {
-    return Collections.emptyList();
-  }
+        
+    /*
+    * Phase 2: write out a GData kind service mapping file for each
+    * term discovered in phase 1.
+    */
+    for (String term : adaptorMap.keySet()) {
+       String kindService = Kind.getKindServiceName(term);
+       File servicePath = new File(kindService);
+
+       PrintWriter pw = null;
+       try {
+         pw = new PrintWriter( filer.createResource(StandardLocation.CLASS_OUTPUT, "",
+	                           servicePath.getPath()).openWriter());
+	 pw.println("# GData Kind Adaptors for " + term);
+         for (String adaptorClass : adaptorMap.get(term)) {
+	      pw.println(adaptorClass);
+          }
+       }
+       catch (IOException ioe) {
+	  messager.printMessage(Diagnostic.Kind.ERROR, "Unable to write kind metadata: " + pw);
+	  ioe.printStackTrace();
+       }
+       finally {
+	  if (pw != null) {
+	    pw.flush();
+	    pw.close();
+	  }
+	}
+
+       messager.printMessage(Diagnostic.Kind.NOTE, "Wrote kind metadata for " + term + " to " 
+			   + servicePath);
+     }
 
-  public Collection<String> supportedAnnotationTypes() {
-    return supportedTypes;
+    return true;
   }
 
-  public AnnotationProcessor getProcessorFor(
-      Set<AnnotationTypeDeclaration> atds,
-      AnnotationProcessorEnvironment env) {
-    return new DataAnnotationProcessor(env);
+  @Override
+  public SourceVersion getSupportedSourceVersion()
+  {
+    return SourceVersion.latestSupported();
   }
 }
+ 
